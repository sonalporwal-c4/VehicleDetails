// Generated by Dagger (https://dagger.dev).
package com.android.task.vehicle.di;

import com.android.task.domain.interactors.GetVehiclesUseCase;
import com.android.task.domain.repository.VehicleRepositoryInterface;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepoModule_ProvideVehicleUseCaseFactory implements Factory<GetVehiclesUseCase> {
  private final Provider<VehicleRepositoryInterface> repositoryProvider;

  public RepoModule_ProvideVehicleUseCaseFactory(
      Provider<VehicleRepositoryInterface> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetVehiclesUseCase get() {
    return provideVehicleUseCase(repositoryProvider.get());
  }

  public static RepoModule_ProvideVehicleUseCaseFactory create(
      Provider<VehicleRepositoryInterface> repositoryProvider) {
    return new RepoModule_ProvideVehicleUseCaseFactory(repositoryProvider);
  }

  public static GetVehiclesUseCase provideVehicleUseCase(VehicleRepositoryInterface repository) {
    return Preconditions.checkNotNullFromProvides(RepoModule.INSTANCE.provideVehicleUseCase(repository));
  }
}
