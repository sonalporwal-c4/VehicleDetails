// Generated by Dagger (https://dagger.dev).
package com.android.task.vehicle.viewModel;

import com.android.task.domain.interactors.GetVehicleNotesUseCase;
import com.android.task.domain.interactors.GetVehiclesUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VehicleViewModel_AssistedFactory_Factory implements Factory<VehicleViewModel_AssistedFactory> {
  private final Provider<GetVehiclesUseCase> getVehiclesUseCaseProvider;

  private final Provider<GetVehicleNotesUseCase> getVehicleNotesUseCaseProvider;

  public VehicleViewModel_AssistedFactory_Factory(
      Provider<GetVehiclesUseCase> getVehiclesUseCaseProvider,
      Provider<GetVehicleNotesUseCase> getVehicleNotesUseCaseProvider) {
    this.getVehiclesUseCaseProvider = getVehiclesUseCaseProvider;
    this.getVehicleNotesUseCaseProvider = getVehicleNotesUseCaseProvider;
  }

  @Override
  public VehicleViewModel_AssistedFactory get() {
    return newInstance(getVehiclesUseCaseProvider, getVehicleNotesUseCaseProvider);
  }

  public static VehicleViewModel_AssistedFactory_Factory create(
      Provider<GetVehiclesUseCase> getVehiclesUseCaseProvider,
      Provider<GetVehicleNotesUseCase> getVehicleNotesUseCaseProvider) {
    return new VehicleViewModel_AssistedFactory_Factory(getVehiclesUseCaseProvider, getVehicleNotesUseCaseProvider);
  }

  public static VehicleViewModel_AssistedFactory newInstance(
      Provider<GetVehiclesUseCase> getVehiclesUseCase,
      Provider<GetVehicleNotesUseCase> getVehicleNotesUseCase) {
    return new VehicleViewModel_AssistedFactory(getVehiclesUseCase, getVehicleNotesUseCase);
  }
}
