// Generated by view binder compiler. Do not edit!
package com.android.task.vehicle.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.android.task.vehicle.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class VehicleListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final TextView txtFuel;

  @NonNull
  public final TextView txtMake;

  @NonNull
  public final TextView txtModel;

  @NonNull
  public final TextView txtNote;

  @NonNull
  public final TextView txtPrice;

  private VehicleListItemBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imageView,
      @NonNull TextView txtFuel, @NonNull TextView txtMake, @NonNull TextView txtModel,
      @NonNull TextView txtNote, @NonNull TextView txtPrice) {
    this.rootView = rootView;
    this.imageView = imageView;
    this.txtFuel = txtFuel;
    this.txtMake = txtMake;
    this.txtModel = txtModel;
    this.txtNote = txtNote;
    this.txtPrice = txtPrice;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static VehicleListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static VehicleListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.vehicle_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static VehicleListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.image_view;
      ImageView imageView = rootView.findViewById(id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.txtFuel;
      TextView txtFuel = rootView.findViewById(id);
      if (txtFuel == null) {
        break missingId;
      }

      id = R.id.txtMake;
      TextView txtMake = rootView.findViewById(id);
      if (txtMake == null) {
        break missingId;
      }

      id = R.id.txtModel;
      TextView txtModel = rootView.findViewById(id);
      if (txtModel == null) {
        break missingId;
      }

      id = R.id.txtNote;
      TextView txtNote = rootView.findViewById(id);
      if (txtNote == null) {
        break missingId;
      }

      id = R.id.txtPrice;
      TextView txtPrice = rootView.findViewById(id);
      if (txtPrice == null) {
        break missingId;
      }

      return new VehicleListItemBinding((ConstraintLayout) rootView, imageView, txtFuel, txtMake,
          txtModel, txtNote, txtPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
